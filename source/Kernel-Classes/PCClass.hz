Class
	name: #PCClass;
	superclass: #ClassPCBehavior;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#name #instVarNames #classVariables );
	classVariables: #();
	package: #'PharoCandle-Kernel-Classes'.

Class PCClass >> classVariables
[
	"Answer the dictionary of class variables that I share with my sole instance, or nil if I have none."
^ classVariables
]

Class PCClass >> initFrom: aSqueakClass methodDict: newMethodDict
[
	"Fill in my instance variables from the given Squeak Class using the given MethodDictionary."
superclass := PCObject.	"corrected later"methodDict := newMethodDict.format := aSqueakClass format.name := (aSqueakClass name copyFrom: 2 to: aSqueakClass name size) asSymbol.	"omit leading M"instVarNames := aSqueakClass instVarNames.classVariables := aSqueakClass classPool.instVarNames size = 0	ifTrue: [ instVarNames := nil ].classVariables size = 0	ifTrue: [ classVariables := nil ]
]

Class PCClass >> instVarNames
[
	"Answer an Array of the receiver's instance variable names."
instVarNames ifNil: [ ^ #() ].^ instVarNames
]

Class PCClass >> isMeta
[
^ false
]

Class PCClass >> name
[
^ name
]

Class PCClass >> theNonMetaClass
[
^ self
]

Class PCClass >> classSide
[
^ self class
]

Metaclass
	name: #PCClass;
	instanceVariables: #().

